{"name":"inputparser","tagline":"Terminal inputs made simple","body":"# inputparser\r\nNote: Thanks to [@Restioson](https://github.com/Restioson) and [@ThatsNoMoon](https://github.com/ThatsNoMoon) for helping me write the code\r\n\r\nTakes terminal input in specified format\r\n\r\nInstead of \r\n```rust\r\nlet mut var: String = String::new();\r\nio::stdin().read_line(&mut var).unwrap();\r\nlet var: i32 = var.trim().parse().unwrap();\r\n```\r\nwhy not \r\n```rust\r\nlet var: i32 = inputparser::input(Def);\r\n```\r\nand it doesn't panic when wrong format is entered (when default arg [Def]).\r\n\r\n## Usage\r\n```toml\r\n[dependencies]\r\ninputparser = \"0.1\"\r\n```\r\n\r\n### Example\r\n```rust\r\nextern crate inputparser;\r\nuse crate::inputparser::input;\r\nuse crate::inputparser::ErHandle::*;\r\n\r\nfn main() {\r\n    let mut i: i32 = input(Def); //for Default continue message \"Input not supported\"\r\n    let mut j: i32 = input(Pnc(\"Panic Message\")); //for custom panic message\r\n    let mut k: i32 = input(Msg(\"Continue Message\")); //for custom continue message\r\n    println!(\"{} {} {}\", i, j, k);\r\n}\r\n```\r\n\r\n[Crate](https://crates.io/crates/inputparser)","note":"Don't delete this file! It's used internally to help with page regeneration."}